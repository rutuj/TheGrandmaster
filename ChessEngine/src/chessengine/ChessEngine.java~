/*
 * ChessEngine.java
 * 
 * Copyright 2014 Rutuj <rutuj@rutuj-Lenovo-Z580>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * 
 */
package chessengine;
import java.util.*;
import javax.swing.*;
public class ChessEngine {
    static String chessboard[][]={
        {"r","k","b","q","a","b","k","r"},
        {"p","p","p","p","p","p","p","p"},
        {" "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "},
        {" "," "," "," "," "," "," "," "},
        {"P","P","P","P","P","P","P","P"},
        {"R","K","B","Q","A","B","K","R"}};
    
    static int pawnBoard[][]={
        { 0,  0,  0,  0,  0,  0,  0,  0},
        {50, 50, 50, 50, 50, 50, 50, 50},
        {10, 10, 20, 30, 30, 20, 10, 10},
        { 5,  5, 10, 25, 25, 10,  5,  5},
        { 0,  0,  0, 20, 20,  0,  0,  0},
        { 5, -5,-10,  0,  0,-10, -5,  5},
        { 5, 10, 10,-20,-20, 10, 10,  5},
        { 0,  0,  0,  0,  0,  0,  0,  0}};
    static int rookBoard[][]={
        { 0,  0,  0,  0,  0,  0,  0,  0},
        { 5, 10, 10, 10, 10, 10, 10,  5},
        {-5,  0,  0,  0,  0,  0,  0, -5},
        {-5,  0,  0,  0,  0,  0,  0, -5},
        {-5,  0,  0,  0,  0,  0,  0, -5},
        {-5,  0,  0,  0,  0,  0,  0, -5},
        {-5,  0,  0,  0,  0,  0,  0, -5},
        { 0,  0,  0,  5,  5,  0,  0,  0}};
    static int knightBoard[][]={
        {-50,-40,-30,-30,-30,-30,-40,-50},
        {-40,-20,  0,  0,  0,  0,-20,-40},
        {-30,  0, 10, 15, 15, 10,  0,-30},
        {-30,  5, 15, 20, 20, 15,  5,-30},
        {-30,  0, 15, 20, 20, 15,  0,-30},
        {-30,  5, 10, 15, 15, 10,  5,-30},
        {-40,-20,  0,  5,  5,  0,-20,-40},
        {-50,-40,-30,-30,-30,-30,-40,-50}};
    static int bishopBoard[][]={
        {-20,-10,-10,-10,-10,-10,-10,-20},
        {-10,  0,  0,  0,  0,  0,  0,-10},
        {-10,  0,  5, 10, 10,  5,  0,-10},
        {-10,  5,  5, 10, 10,  5,  5,-10},
        {-10,  0, 10, 10, 10, 10,  0,-10},
        {-10, 10, 10, 10, 10, 10, 10,-10},
        {-10,  5,  0,  0,  0,  0,  5,-10},
        {-20,-10,-10,-10,-10,-10,-10,-20}};
    static int queenBoard[][]={
        {-20,-10,-10, -5, -5,-10,-10,-20},
        {-10,  0,  0,  0,  0,  0,  0,-10},
        {-10,  0,  5,  5,  5,  5,  0,-10},
        { -5,  0,  5,  5,  5,  5,  0, -5},
        {  0,  0,  5,  5,  5,  5,  0, -5},
        {-10,  5,  5,  5,  5,  5,  0,-10},
        {-10,  0,  5,  0,  0,  0,  0,-10},
        {-20,-10,-10, -5, -5,-10,-10,-20}};
    static int kingMidBoard[][]={
        {-30,-40,-40,-50,-50,-40,-40,-30},
        {-30,-40,-40,-50,-50,-40,-40,-30},
        {-30,-40,-40,-50,-50,-40,-40,-30},
        {-30,-40,-40,-50,-50,-40,-40,-30},
        {-20,-30,-30,-40,-40,-30,-30,-20},
        {-10,-20,-20,-20,-20,-20,-20,-10},
        { 20, 20,  0,  0,  0,  0, 20, 20},
        { 20, 30, 10,  0,  0, 10, 30, 20}};
    static int kingEndBoard[][]={
        {-50,-40,-30,-20,-20,-30,-40,-50},
        {-30,-20,-10,  0,  0,-10,-20,-30},
        {-30,-10, 20, 30, 30, 20,-10,-30},
        {-30,-10, 30, 40, 40, 30,-10,-30},
        {-30,-10, 30, 40, 40, 30,-10,-30},
        {-30,-10, 20, 30, 30, 20,-10,-30},
        {-30,-30,  0,  0,  0,  0,-30,-30},
        {-50,-30,-30,-30,-30,-30,-30,-50}};
    static String history="*****";
    static boolean castleWhiteLong=true, castleWhiteShort=true, castleBlackLong=true, castleBlackShort=true;
    static int choice=-1, currentPlayer=1;//1=human white, 0=human black
    static int globalDepth=-1, kingPositionC, kingPositionL, nodeCount;
        static String moveList="";
    public static void main(String[] args) {
        for (int i=0;i<8;i++) {
            System.arraycopy(chessboard[i], 0, UserInterface.chessboard[i], 0, 8);
        }
        Scanner sc=new Scanner(System.in);
        System.out.print("What do you want? (1=white, 0=black) ");
        choice=sc.nextInt();
        System.out.print("Enter alpha beta depth : ");
        globalDepth=sc.nextInt();
        kingPositionC=0; kingPositionL=0;
        while (!"A".equals(chessboard[kingPositionC/8][kingPositionC%8])) {kingPositionC++;}//get King's location
        while (!"a".equals(chessboard[kingPositionL/8][kingPositionL%8])) {kingPositionL++;}//get king's location
        
        JFrame f=new JFrame("The Grandmaster");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        UserInterface ui=new UserInterface();
        f.add(ui);
        f.setSize(550, 570);
        f.setVisible(true);
    }
    public static String printMove() {
        kingPositionC=0; kingPositionL=0;
        while (!"A".equals(chessboard[kingPositionC/8][kingPositionC%8])) {kingPositionC++;}//get King's location
        while (!"a".equals(chessboard[kingPositionL/8][kingPositionL%8])) {kingPositionL++;}//get king's location
        String bestMove;
        bestMove=alphaBeta(globalDepth, 1000000, -1000000, "", 0);
        System.out.println("Best move: "+bestMove.substring(0, 5));
        System.out.println("Move score: "+bestMove.substring(5, bestMove.length()));
        history+=bestMove.substring(0, 5);
        return bestMove;
    }
    public static String alphaBeta(int depth, int beta, int alpha, String move, int player) {
        //The String is in the form of 1234b##### (move, then score)
        String list=posibleMoves();
        if (depth==0 || list.length()==0) {return move+(rating(list.length(), depth)*(player*2-1));}//The [*(player*2-1)] has been proven correct and necessary
        list=sortMoves2(list);
        player=1-player;
        for (int i=0;i<list.length();i+=5) {
            makeMove(list.substring(i,i+5));
            nodeCount+=1;
            flipBoard();
            String returnString=alphaBeta(depth-1, beta, alpha, list.substring(i,i+5), player);
            int value=Integer.valueOf(returnString.substring(5, returnString.length()));
            flipBoard();
            undoMove(list.substring(i,i+5));
            if (player==0) {
                if (value<=beta) {beta=value; if (depth==globalDepth) {move=returnString.substring(0, 5);}}
            } else {
                if (value>alpha) {alpha=value;  if (depth==globalDepth) {move=returnString.substring(0, 5);}}
            }
            if (alpha>=beta) {
                if (player==0) {return move+beta;} else {return move+alpha;}
            }
        }
        if (player==0) {return move+beta;} else {return move+alpha;}
    }
    public static void makeMove(String move) {
        if (move.charAt(4)!='C' && move.charAt(4)!='P') {
            chessboard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))]=chessboard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))];
            chessboard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))]=" ";
            if ("A".equals(chessboard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))])) {
                kingPositionC=8*Character.getNumericValue(move.charAt(2))+Character.getNumericValue(move.charAt(3));//updates the king position
            }
        } else if (move.charAt(4)=='P') {
            // pawn promotion
            chessboard[1][Character.getNumericValue(move.charAt(0))]=" ";
            chessboard[0][Character.getNumericValue(move.charAt(1))]=String.valueOf(move.charAt(3));
        } else {
            //castling
            chessboard[7][Character.getNumericValue(move.charAt(0))]=" ";
            chessboard[7][Character.getNumericValue(move.charAt(1))]=" ";
            chessboard[7][Character.getNumericValue(move.charAt(2))]="A";
            chessboard[7][Character.getNumericValue(move.charAt(3))]="R";
            kingPositionC=56+Character.getNumericValue(move.charAt(2));
        }
    }
    public static void undoMove(String move) {
        if (move.charAt(4)!='C' && move.charAt(4)!='P') {
            chessboard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))]=chessboard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))];
            chessboard[Character.getNumericValue(move.charAt(2))][Character.getNumericValue(move.charAt(3))]=String.valueOf(move.charAt(4));
            if ("A".equals(chessboard[Character.getNumericValue(move.charAt(0))][Character.getNumericValue(move.charAt(1))])) {
                kingPositionC=8*Character.getNumericValue(move.charAt(0))+Character.getNumericValue(move.charAt(1));//updates the king position
            }
        } else if (move.charAt(4)=='P') {
            //reverse pawn promotion
            chessboard[1][Character.getNumericValue(move.charAt(0))]="P";
            chessboard[0][Character.getNumericValue(move.charAt(1))]=String.valueOf(move.charAt(2));
        } else {
            //reverse castle
            chessboard[7][Character.getNumericValue(move.charAt(0))]="A";
            chessboard[7][Character.getNumericValue(move.charAt(1))]="R";
            chessboard[7][Character.getNumericValue(move.charAt(2))]=" ";
            chessboard[7][Character.getNumericValue(move.charAt(3))]=" ";
            kingPositionC=56+Character.getNumericValue(move.charAt(0));//updates the king position (56=8*7)
            
        }
    }
    public static void flipBoard() {
        String temp;
        for (int i=0;i<32;i++) {
            int r=i/8, c=i%8;
            if (Character.isUpperCase(chessboard[r][c].charAt(0))) {
                temp=chessboard[r][c].toLowerCase();
            } else {
                temp=chessboard[r][c].toUpperCase();
            }
            if (Character.isUpperCase(chessboard[7-r][7-c].charAt(0))) {
                chessboard[r][c]=chessboard[7-r][7-c].toLowerCase();
            } else {
                chessboard[r][c]=chessboard[7-r][7-c].toUpperCase();
            }
            chessboard[7-r][7-c]=temp;
        }
        int kingTemp=kingPositionC;
        kingPositionC=63-kingPositionL;
        kingPositionL=63-kingTemp;
    }
    public static int rating(int listLength, int depth) {//list is only for checkmate checking
        
        int counter;
        int material=rateMaterial();
        counter=material;
        counter+=ratePositional(material);//material is an indication of midgame/endgame state
        counter+=rateAttack();
        counter+=rateMoveability(listLength, depth, material);
        flipBoard();
        material=rateMaterial();
        counter-=material;
        counter-=ratePositional(material);
        counter-=rateAttack();
        if (listLength==-1) {
            counter-=rateMoveability(-1, depth, material);
        } else {
            counter-=rateMoveability(posibleMoves().length(), depth, material);
        }
        
        flipBoard();
        return -(counter+depth*50);//
    }
    public static int rateMaterial() {
        int counter=0;
        int bishopCounter=0;
        for (int i=0;i<64;i++) {
            if (!" ".equals(chessboard[i/8][i%8])) {
                
                switch (chessboard[i/8][i%8]) {
                    case "P": counter+=100;
                        break;
                    case "R": counter+=500;
                        break;
                    case "K": counter+=300;
                        break;
                    case "B": bishopCounter+=1;
                        break;
                    case "Q": counter+=900;
                        break;
                }
            }
        }
        if (bishopCounter>=2) {counter+=300*bishopCounter;} else if (bishopCounter==1) {counter+=250;}//existence of bishop pair
        return counter*7;//minimum 7
    }
    public static int rateAttack() {
        int counter=0;
        int tempPositionC=kingPositionC;
        for (int i=0;i<64;i++) {
            if (!" ".equals(chessboard[i/8][i%8])) {
                
                switch (chessboard[i/8][i%8]) {
                    case "P": {kingPositionC=i; if (!kingSafe()) {counter-=50;}}
                        break;
                    case "R": {kingPositionC=i; if (!kingSafe()) {counter-=500;}}
                        break;
                    case "K": {kingPositionC=i; if (!kingSafe()) {counter-=300;}}
                        break;
                    case "B": {kingPositionC=i; if (!kingSafe()) {counter-=300;}}
                        break;
                    case "Q": {kingPositionC=i; if (!kingSafe()) {counter-=900;}}
                        break;
                }
            }
        }
        kingPositionC=tempPositionC;
        if (!kingSafe()) {counter-=400;}//penalty for check
        return counter/2;
    }
    public static int rateMoveability(int listLength, int depth, int material) {
        int counter=0;
        counter+=listLength*15;//return 5 points per valid move
        if (listLength==0) {//current side is in checkmate/stalemate
            if (!kingSafe()) {//if checkmate
                counter+=-200000*depth;//(depth+1)*(player*2-1);//the [*(depth+1)] is a way of favoring quicker checkMates
            } else {//if stalemate
                counter+=-150000*depth;//+1000*(globalDepth-depth)
            }
        }
        return counter;
    }
    public static int ratePositional(int material) {
        int counter=0;
        for (int i=0;i<64;i++) {
            if (!" ".equals(chessboard[i/8][i%8])) {
                
                switch (chessboard[i/8][i%8]) {
                    case "P": counter+=pawnBoard[i/8][i%8];
                        break;
                    case "R": counter+=rookBoard[i/8][i%8];
                        break;
                    case "K": counter+=knightBoard[i/8][i%8];
                        break;
                    case "B": counter+=bishopBoard[i/8][i%8];
                        break;
                    case "Q": counter+=queenBoard[i/8][i%8];
                        break;
                    case "A": if (material>=1750) {counter+=kingMidBoard[i/8][i%8]; counter+=posibleA(kingPositionC).length()*10;} else {counter+=kingEndBoard[i/8][i%8]; counter+=posibleA(kingPositionC).length()*30;}
                        break;
                }
            }
        }
        return counter;
    }
    public static String posibleMoves() {
        
        String list="";
        for (int i=0;i<64;i++) {
            if (Character.isUpperCase(chessboard[i/8][i%8].charAt(0))) {
               
                switch (chessboard[i/8][i%8]) {
                    case "P": list+=posibleP(i);
                        break;
                    case "R": list+=posibleR(i);
                        break;
                    case "K": list+=posibleK(i);
                        break;
                    case "B": list+=posibleB(i);
                        break;
                    case "Q": list+=posibleQ(i);
                        break;
                    case "A": list+=posibleA(i);
                        break;//castling is from king point of view
                }
            }
        }
        //these are roughly arranged in order of probability of occuring and not in order of score:
        return list.replaceAll("....a", "");//removes king-captures since they can never happen
    }
    public static String posibleP(int i) {
        String list="", oldPiece;
        int r=i/8, c=i%8;
            for (int j=-1;j<=1;j+=2) {
                try {
                    if (Character.isLowerCase(chessboard[r-1][c+j].charAt(0)) && i>=16)
                    {
                        oldPiece=chessboard[r-1][c+j];
                        chessboard[r][c]=" ";
                        chessboard[r-1][c+j]="P";
                        if (kingSafe()) {
                            
                            list=list+r+c+(r-1)+(c+j)+oldPiece;
                        }
                        chessboard[r][c]="P";
                        chessboard[r-1][c+j]=oldPiece;
                    }
                } catch (Exception e) {}
                try {//promotion && capture
                    if (Character.isLowerCase(chessboard[r-1][c+j].charAt(0)) && i<16) {
                        String[] temp={"Q","R","B","K"};
                        for (int k=0;k<4;k++) {
                            oldPiece=chessboard[r-1][c+j];
                            chessboard[r][c]=" ";
                            chessboard[r-1][c+j]=temp[k];
                            if (kingSafe()) {
                                //column1column2captured-piecenew-piece
                                list=list+c+(c+j)+oldPiece+temp[k]+"P";
                            }
                            chessboard[r][c]="P";
                            chessboard[r-1][c+j]=oldPiece;
                        }
                    }
                } catch (Exception e) {}
            }
            try {
                if (" ".equals(chessboard[r-1][c]) && i>=16)
                {
                    oldPiece=chessboard[r-1][c];
                    chessboard[r][c]=" ";
                    chessboard[r-1][c]="P";
                    if (kingSafe()) {
                        
                        list=list+r+c+(r-1)+c+oldPiece;
                    }
                    chessboard[r][c]="P";
                    chessboard[r-1][c]=oldPiece;
                }
            } catch (Exception e) {}
            try {//promotion && no capture
                if (" ".equals(chessboard[r-1][c]) && i<16) {
                    String[] temp={"Q","R","B","K"};
                    for (int k=0;k<4;k++) {
                        oldPiece=chessboard[r-1][c];
                        chessboard[r][c]=" ";
                        chessboard[r-1][c]=temp[k];
                        if (kingSafe()) {
                            //column1column2captured-piecenew-piece
                            list=list+c+c+oldPiece+temp[k]+"P";
                        }
                        chessboard[r][c]="P";
                        chessboard[r-1][c]=oldPiece;
                    }
                }
            } catch (Exception e) {}
            try {
                if (" ".equals(chessboard[r-1][c]) && " ".equals(chessboard[r-2][c]) && i>=48)
                {
                    oldPiece=chessboard[r-2][c];
                    chessboard[r][c]=" ";
                    chessboard[r-2][c]="P";
                    if (kingSafe()) {
                        
                        list=list+r+c+(r-2)+c+oldPiece;
                    }
                    chessboard[r][c]="P";
                    chessboard[r-2][c]=oldPiece;
                }
            } catch (Exception e) {}
        return list;
    }
    public static String posibleR(int i) {
        String list="", oldPiece;
        int r=i/8, c=i%8;
        int temp=1;
        for (int j=-1;j<=1;j+=2) {
            try {
                while (" ".equals(chessboard[r][c+temp*j]))
                {
                    oldPiece=chessboard[r][c+temp*j];
                    chessboard[r][c]=" ";
                    chessboard[r][c+temp*j]="R";
                    if (kingSafe()) {
                        
                        list=list+r+c+r+(c+temp*j)+oldPiece;
                    }
                    chessboard[r][c]="R";
                    chessboard[r][c+temp*j]=oldPiece;
                    temp++;
                }
                if (Character.isLowerCase(chessboard[r][c+temp*j].charAt(0))) {
                    oldPiece=chessboard[r][c+temp*j];
                    chessboard[r][c]=" ";
                    chessboard[r][c+temp*j]="R";
                    if (kingSafe()) {
                        
                        list=list+r+c+r+(c+temp*j)+oldPiece;
                    }
                    chessboard[r][c]="R";
                    chessboard[r][c+temp*j]=oldPiece;
                }
            } catch (Exception e) {}
            temp=1;
            try {
                while (" ".equals(chessboard[r+temp*j][c]))
                {
                    oldPiece=chessboard[r+temp*j][c];
                    chessboard[r][c]=" ";
                    chessboard[r+temp*j][c]="R";
                    if (kingSafe()) {
                        
                        list=list+r+c+(r+temp*j)+c+oldPiece;
                    }
                    chessboard[r][c]="R";
                    chessboard[r+temp*j][c]=oldPiece;
                    temp++;
                }
                if (Character.isLowerCase(chessboard[r+temp*j][c].charAt(0))) {
                    oldPiece=chessboard[r+temp*j][c];
                    chessboard[r][c]=" ";
                    chessboard[r+temp*j][c]="R";
                    if (kingSafe()) {
                        
                        list=list+r+c+(r+temp*j)+c+oldPiece;
                    }
                    chessboard[r][c]="R";
                    chessboard[r+temp*j][c]=oldPiece;
                }
            } catch (Exception e) {}
            temp=1;
        }
        return list;
    }
    public static String posibleK(int i) {
        String list="", oldPiece;
        int r=i/8, c=i%8;
        for (int j=-1;j<=1;j+=2) {
            for (int k=-1;k<=1;k+=2) {
                try {
                    if (Character.isLowerCase(chessboard[r+j][c+k*2].charAt(0)) || " ".equals(chessboard[r+j][c+k*2])) {
                        oldPiece=chessboard[r+j][c+k*2];
                        chessboard[r][c]=" ";
                        chessboard[r+j][c+k*2]="K";
                        if (kingSafe()) {
                            
                            list=list+r+c+(r+j)+(c+k*2)+oldPiece;
                        }
                        chessboard[r][c]="K";
                        chessboard[r+j][c+k*2]=oldPiece;
                    }
                } catch (Exception e) {}
                try {
                    if (Character.isLowerCase(chessboard[r+j*2][c+k].charAt(0)) || " ".equals(chessboard[r+j*2][c+k])) {
                        oldPiece=chessboard[r+j*2][c+k];
                        chessboard[r][c]=" ";
                        chessboard[r+j*2][c+k]="K";
                        if (kingSafe()) {
                            
                            list=list+r+c+(r+j*2)+(c+k)+oldPiece;
                        }
                        chessboard[r][c]="K";
                        chessboard[r+j*2][c+k]=oldPiece;
                    }
                } catch (Exception e) {}
            }
        }
        return list;
    }
    public static String posibleB(int i) {
        String list="", oldPiece;
        int r=i/8, c=i%8;
        int temp=1;
        for (int j=-1;j<=1;j+=2) {
            for (int k=-1;k<=1;k+=2) {
                try {
                    while (" ".equals(chessboard[r+temp*j][c+temp*k]))
                    {
                        oldPiece=chessboard[r+temp*j][c+temp*k];
                        chessboard[r][c]=" ";
                        chessboard[r+temp*j][c+temp*k]="B";
                        if (kingSafe()) {
                            
                            list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                        }
                        chessboard[r][c]="B";
                        chessboard[r+temp*j][c+temp*k]=oldPiece;
                        temp++;
                    }
                    if (Character.isLowerCase(chessboard[r+temp*j][c+temp*k].charAt(0))) {
                        oldPiece=chessboard[r+temp*j][c+temp*k];
                        chessboard[r][c]=" ";
                        chessboard[r+temp*j][c+temp*k]="B";
                        if (kingSafe()) {
                            
                            list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                        }
                        chessboard[r][c]="B";
                        chessboard[r+temp*j][c+temp*k]=oldPiece;
                    }
                } catch (Exception e) {}
                temp=1;
            }
        }
        return list;
    }
    public static String posibleQ(int i) {
        String list="", oldPiece;
        int r=i/8, c=i%8;
        int temp=1;
        for (int j=-1;j<=1;j++) {
            for (int k=-1;k<=1;k++) {
                if (j!=0 || k!=0) {
                    try {
                        while (" ".equals(chessboard[r+temp*j][c+temp*k]))
                        {
                            oldPiece=chessboard[r+temp*j][c+temp*k];
                            chessboard[r][c]=" ";
                            chessboard[r+temp*j][c+temp*k]="Q";
                            if (kingSafe()) {
                                
                                list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                            }
                            chessboard[r][c]="Q";
                            chessboard[r+temp*j][c+temp*k]=oldPiece;
                            temp++;
                        }
                        if (Character.isLowerCase(chessboard[r+temp*j][c+temp*k].charAt(0))) {
                            oldPiece=chessboard[r+temp*j][c+temp*k];
                            chessboard[r][c]=" ";
                            chessboard[r+temp*j][c+temp*k]="Q";
                            if (kingSafe()) {
                                
                                list=list+r+c+(r+temp*j)+(c+temp*k)+oldPiece;
                            }
                            chessboard[r][c]="Q";
                            chessboard[r+temp*j][c+temp*k]=oldPiece;
                        }
                    } catch (Exception e) {}
                    temp=1;
                }
            }
        }
        return list;
    }
    public static String posibleA(int i) {
        String list="", oldPiece;
        int r=i/8, c=i%8;
        for (int j=0;j<9;j++) {
            if (j!=4) {
                try {
                    if (Character.isLowerCase(chessboard[r-1+j/3][c-1+j%3].charAt(0)) || " ".equals(chessboard[r-1+j/3][c-1+j%3])) {
                        oldPiece=chessboard[r-1+j/3][c-1+j%3];
                        chessboard[r][c]=" ";
                     chessboard[r-1+j/3][c-1+j%3]="A";
                        int kingTemp=kingPositionC;
                        kingPositionC=i+(j/3)*8+j%3-9;
                        if (kingSafe()) {
                            
                            list=list+r+c+(r-1+j/3)+(c-1+j%3)+oldPiece;
                        }
                        chessboard[r][c]="A";
                        chessboard[r-1+j/3][c-1+j%3]=oldPiece;
                        kingPositionC=kingTemp;
                    }
                } catch (Exception e) {}
            }
        }
        //castling (returns move as kingColumn,rookColumn,kingNewColumn,rookNewColumn,C
        if ("A".equals(chessboard[7][4]) && castleWhiteLong && "R".equals(chessboard[7][0]) && " ".equals(chessboard[7][1]) && " ".equals(chessboard[7][2]) && " ".equals(chessboard[7][3])) {
            boolean temp=false;
            for (int j=1;j<=2;j++) {
                makeMove("747"+j+" ");
                temp=(temp || !kingSafe());
                undoMove("747"+j+" ");
            }
            if (!temp) {
                //castling possible
                
                list+="4023C";
            }
        }
        if ("A".equals(chessboard[7][4]) && castleWhiteShort && "R".equals(chessboard[7][7]) && " ".equals(chessboard[7][5]) && " ".equals(chessboard[7][6])) {
            boolean temp=false;
            for (int j=5;j<=6;j++) {
                makeMove("747"+j+" ");
                temp=(temp || !kingSafe());
                undoMove("747"+j+" ");
            }
            if (!temp) {
                //castling possible
                
                list+="4765C";
            }
        }
        if ("A".equals(chessboard[7][3]) && castleBlackLong && "R".equals(chessboard[7][7]) && " ".equals(chessboard[7][4]) && " ".equals(chessboard[7][5]) && " ".equals(chessboard[7][6])) {
            boolean temp=false;
            for (int j=4;j<=5;j++) {
                makeMove("747"+j+" ");
                temp=(temp || !kingSafe());
                undoMove("747"+j+" ");
            }
            if (!temp) {
                //castling possible
                list+="3754C";
            }
        }
        if ("A".equals(chessboard[7][3]) && castleBlackShort && "R".equals(chessboard[7][0]) && " ".equals(chessboard[7][1]) && " ".equals(chessboard[7][2])) {
            boolean temp=false;
            for (int j=1;j<=2;j++) {
                makeMove("747"+j+" ");
                temp=(temp || !kingSafe());
                undoMove("747"+j+" ");
            }
            if (!temp) {
                //castling possible
                list+="3012C";
            }
        }
        return list;
    }
    public static boolean kingSafe() {
        
        //bishop and queen diagonal movement
        int temp=1;
        for (int i=-1;i<=1;i+=2) {
            for (int j=-1;j<=1;j+=2) {
                try {
                    while (" ".equals(chessboard[kingPositionC/8+temp*i][kingPositionC%8+temp*j])) {temp++;}
                    if ("b".equals(chessboard[kingPositionC/8+temp*i][kingPositionC%8+temp*j]) ||
                            "q".equals(chessboard[kingPositionC/8+temp*i][kingPositionC%8+temp*j])) {return false;}
                } catch (Exception e) {}
                temp=1;
            }
        }
        //rookand queen perpendicular movement
        for (int i=-1;i<=1;i+=2) {
            try {
                while (" ".equals(chessboard[kingPositionC/8][kingPositionC%8+temp*i])) {temp++;}
                if ("r".equals(chessboard[kingPositionC/8][kingPositionC%8+temp*i]) ||
                        "q".equals(chessboard[kingPositionC/8][kingPositionC%8+temp*i])) {return false;}
            } catch (Exception e) {}
            temp=1;
            try {
                while (" ".equals(chessboard[kingPositionC/8+temp*i][kingPositionC%8])) {temp++;}
                if ("r".equals(chessboard[kingPositionC/8+temp*i][kingPositionC%8]) ||
                        "q".equals(chessboard[kingPositionC/8+temp*i][kingPositionC%8])) {return false;}
            } catch (Exception e) {}
            temp=1;
        }
        //knight
        for (int i=-1;i<=1;i+=2) {
            for (int j=-1;j<=1;j+=2) {
                try {if ("k".equals(chessboard[kingPositionC/8+i][kingPositionC%8+j*2])) {return false;}} catch (Exception e) {}
                try {if ("k".equals(chessboard[kingPositionC/8+i*2][kingPositionC%8+j])) {return false;}} catch (Exception e) {}
            }
        }
        //pawn
        if (kingPositionC>=16) {
            try {if ("p".equals(chessboard[kingPositionC/8-1][kingPositionC%8-1])) {return false;}} catch (Exception e) {}
            try {if ("p".equals(chessboard[kingPositionC/8-1][kingPositionC%8+1])) {return false;}} catch (Exception e) {}
        }
        //king
        for (int i=-1;i<=1;i++) {
            for (int j=-1;j<=1;j++) {
                if (i!=0 || j!=0) {
                    try {if ("a".equals(chessboard[kingPositionC/8+i][kingPositionC%8+j])) {return false;}} catch (Exception e) {}
                }
            }
        }
        return true;
    
        
    }
    
    //following code is ported from Orion chess engine
    public static String sortMoves(String list) {
        String newList="";
        for (int i=0;i<list.length();i+=5) {
            if (list.charAt(i+4)=='q') {newList+=list.substring(i,i+5); list=list.replaceFirst(list.substring(i,i+5), ""); i-=5;}
        }
        for (int i=0;i<list.length();i+=5) {
            if (list.charAt(i+4)=='r') {newList+=list.substring(i,i+5); list=list.replaceFirst(list.substring(i,i+5), ""); i-=5;}
        }
        for (int i=0;i<list.length();i+=5) {
            if (list.charAt(i+4)=='k') {newList+=list.substring(i,i+5); list=list.replaceFirst(list.substring(i,i+5), ""); i-=5;}
        }
        for (int i=0;i<list.length();i+=5) {
            if (list.charAt(i+4)=='b') {newList+=list.substring(i,i+5); list=list.replaceFirst(list.substring(i,i+5), ""); i-=5;}
        }
        for (int i=0;i<list.length();i+=5) {
            if (list.charAt(i+4)=='p') {newList+=list.substring(i,i+5); list=list.replaceFirst(list.substring(i,i+5), ""); i-=5;}
        }
        for (int i=0;i<list.length();i+=5) {
            if (list.charAt(i+4)==' ') {newList+=list.substring(i,i+5); list=list.replaceFirst(list.substring(i,i+5), ""); i-=5;}
        }
        
        return newList;
    }
    public static String sortMoves2(String list) {
       
        int[] score=new int[list.length()/5];
        for (int i=0;i<list.length();i+=5) {//faster
            makeMove(list.substring(i,i+5));
            score[i/5]=-rating(-1, 0);
            undoMove(list.substring(i,i+5));
        }
        
        String newLista="", newListb=list;
        for (int i=0;i<Math.min(50,list.length()/5);i++) {
            int max=-1000000,maxLocation=0;
            for (int j=0;j<list.length()/5;j++) {
                if (score[j]>max) {max=score[j]; maxLocation=j;}
            }
            score[maxLocation]=-1000000;//makes sure it wont be counted again
            newLista+=list.substring(maxLocation*5, maxLocation*5+5);
            newListb=newListb.replace(list.substring(maxLocation*5, maxLocation*5+5), "");
        }
        return newLista+newListb;
    }
}
